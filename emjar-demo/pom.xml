<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <artifactId>commons</artifactId>
    <groupId>no.hassle</groupId>
    <version>2.0-SNAPSHOT</version>
  </parent>

  <name>emjar-demo</name>
  <groupId>no.hassle.commons</groupId>
  <artifactId>emjar-demo</artifactId>

  <url>https://github.com/no-hassle/java-commons/tree/master/emjar-demo</url>
  <packaging>jar</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <main.class>no.hassle.emjar.demo.Demo</main.class>
    <jetty.version>9.3.15.v20161220</jetty.version>
    <jersey.version>2.25</jersey.version>
    <jackson.version>2.8.6</jackson.version>
    <java.executable>java</java.executable>
    <logging.format>[%4$s] %5$s%6$s%n</logging.format>
  </properties>

  <dependencies>
    <dependency>
      <groupId>javax.ws.rs</groupId>
      <artifactId>javax.ws.rs-api</artifactId>
      <version>2.0.1</version>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-server</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.containers</groupId>
      <artifactId>jersey-container-servlet-core</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.ext</groupId>
      <artifactId>jersey-metainf-services</artifactId>
      <version>2.25</version>
    </dependency>

    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>${jetty.version}</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-xml-provider</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcprov-jdk15on</artifactId>
      <version>1.56</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.5.1</version>
        <inherited>true</inherited>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.0.2</version>
        <executions>
          <execution>
            <id>default-jar</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <archive>
                <manifest>
                  <mainClass>${main.class}</mainClass>
                </manifest>
                <manifestEntries>
                  <Implementation-Title>${project.name}</Implementation-Title>
                  <Implementation-Vendor>no.hassle</Implementation-Vendor>
                  <Implementation-Version>${project.artifactId}-${project.version}</Implementation-Version>
                </manifestEntries>
              </archive>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.4.0</version>
        <executions>
          <execution>
            <id>fencepost</id> <!-- The tesla profiler omits the last phase... -->
            <phase>verify</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>${java.executable}</executable>
              <workingDirectory>${project.build.directory}</workingDirectory>
              <arguments>
                <argument>-version</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>bare</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>classpath-bare</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>build-classpath</goal>
                </goals>
                <configuration>
                  <outputProperty>bare.classpath</outputProperty>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.4.0</version>
            <executions>
              <execution>
                <id>execute-bare-1</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  bare ${logging.format}</argument>
                    <argument>-cp</argument>
                    <argument>classes/:${bare.classpath}</argument>
                    <argument>${main.class}</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>execute-bare-2</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  bare ${logging.format}</argument>
                    <argument>-Demjar.demo.classpath-scanning</argument>
                    <argument>-cp</argument>
                    <argument>classes/:${bare.classpath}</argument>
                    <argument>${main.class}</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>emjar</id>
      <build>
        <plugins>
          <plugin>
            <groupId>no.hassle.maven.plugins</groupId>
            <artifactId>emjar-maven-plugin</artifactId>
            <version>${project.version}</version>
            <executions>
              <execution>
                <id>package-emjar</id>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.4.0</version>
            <executions>
              <execution>
                <id>execute-emjar-1</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  emjar ${logging.format}</argument>
                    <argument>-jar</argument>
                    <argument>emjar-demo-${project.version}-emjar.jar</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>execute-emjar-2</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  emjar ${logging.format}</argument>
                    <argument>-Demjar.demo.classpath-scanning</argument>
                    <argument>-jar</argument>
                    <argument>emjar-demo-${project.version}-emjar.jar</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>shade</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>2.4.3</version>
            <executions>
              <execution>
                <id>package-shade</id>
                <goals>
                  <goal>shade</goal>
                </goals>
                <configuration>
                  <shadedArtifactAttached>true</shadedArtifactAttached>
                  <createDependencyReducedPom>false</createDependencyReducedPom>
                  <filters>
                    <!-- The following filter is needed to avoid signatures
                         from embedded jars being included as if they were
                         signatures for the uber jar -->
                    <filter>
                      <artifact>*:*</artifact>
                      <excludes>
                        <exclude>META-INF/*.SF</exclude>
                        <exclude>META-INF/*.DSA</exclude>
                        <exclude>META-INF/*.RSA</exclude>
                      </excludes>
                    </filter>
                  </filters>
                  <transformers>
                    <!-- The following transformer is need to avoid e.g
                         META-INF/services/javax.ws.rs.ext.MessageBodyWriter
                         files from different embedded jars overwriting
                         eachother -->
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                  </transformers>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.4.0</version>
            <executions>
              <execution>
                <id>execute-shade-1</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  shade ${logging.format}</argument>
                    <argument>-jar</argument>
                    <argument>emjar-demo-${project.version}-shaded.jar</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>execute-shade-2</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  shade ${logging.format}</argument>
                    <argument>-Demjar.demo.classpath-scanning</argument>
                    <argument>-jar</argument>
                    <argument>emjar-demo-${project.version}-shaded.jar</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>onejar</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.googlecode.maven-download-plugin</groupId>
            <artifactId>download-maven-plugin</artifactId>
            <version>1.3.0</version>
            <executions>
              <execution>
                <id>fetch-onejar</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>wget</goal>
                </goals>
                <configuration>
                  <url>https://master.dl.sourceforge.net/project/one-jar/one-jar/one-jar-0.97/one-jar-boot-0.97.jar</url>
                  <unpack>true</unpack>
                  <outputDirectory>${project.build.directory}/one-jar</outputDirectory>
                  <md5>f50c25dae81132ceadf8a1e6386c19a2</md5>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>2.4</version>
            <executions>
              <execution>
                <id>package-onejar</id>
                <phase>package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
                <configuration>
                  <archive>
                    <manifest>
                      <mainClass>com.simontuffs.onejar.Boot</mainClass>
                    </manifest>
                    <manifestEntries>
                      <One-Jar-Main-Class>${main.class}</One-Jar-Main-Class>
                      <One-Jar-URL-Factory>com.simontuffs.onejar.JarClassLoader$OneJarURLFactory</One-Jar-URL-Factory>
                    </manifestEntries>
                  </archive>
                  <descriptors>
                    <descriptor>src/assembly/one-jar.xml</descriptor>
                  </descriptors>
                  <recompressZippedFiles>false</recompressZippedFiles>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.4.0</version>
            <executions>
              <execution>
                <id>execute-onejar-1</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  onejar ${logging.format}</argument>
                    <argument>-jar</argument>
                    <argument>emjar-demo-${project.version}-onejar.jar</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>execute-onejar-2</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  onejar ${logging.format}</argument>
                    <argument>-Demjar.demo.classpath-scanning</argument>
                    <argument>-jar</argument>
                    <argument>emjar-demo-${project.version}-onejar.jar</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>springboot</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <version>1.4.3.RELEASE</version>
            <executions>
              <execution>
                <id>package-springboot</id>
                <goals>
                  <goal>repackage</goal>
                </goals>
                <configuration>
                  <classifier>springboot</classifier>
                  <layout>JAR</layout>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.4.0</version>
            <executions>
              <execution>
                <id>execute-springboot-1</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  springboot ${logging.format}</argument>
                    <argument>-jar</argument>
                    <argument>emjar-demo-${project.version}-springboot.jar</argument>
                  </arguments>
                  <successCodes>
                    <successCode>0</successCode>
                    <successCode>1</successCode>
                  </successCodes>
                </configuration>
              </execution>
              <execution>
                <id>execute-springboot-2</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  springboot ${logging.format}</argument>
                    <argument>-Demjar.demo.classpath-scanning</argument>
                    <argument>-jar</argument>
                    <argument>emjar-demo-${project.version}-springboot.jar</argument>
                  </arguments>
                  <successCodes>
                    <successCode>0</successCode>
                    <successCode>1</successCode>
                  </successCodes>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jarinjar</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.googlecode.maven-download-plugin</groupId>
            <artifactId>download-maven-plugin</artifactId>
            <version>1.3.0</version>
            <executions>
              <execution>
                <id>fetch-jarinjar</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>wget</goal>
                </goals>
                <configuration>
                  <url>http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/plain/org.eclipse.jdt.ui/jar-in-jar-loader.zip</url>
                  <unpack>true</unpack>
                  <outputDirectory>${project.build.directory}/jar-in-jar</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>classpath-jarinjar</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>build-classpath</goal>
                </goals>
                <configuration>
                  <outputProperty>jarinjar.classpath</outputProperty>
                  <!-- The Maven XML parser treats whitespace-only values
                       as absent, thus this hack... -->
                  <pathSeparator xml:space="preserve"> l</pathSeparator>
                  <prefix>ib</prefix>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>2.4</version>
            <executions>
              <execution>
                <id>package-jarinjar</id>
                <phase>package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
                <configuration>
                  <archive>
                    <manifest>
                      <mainClass>org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader</mainClass>
                    </manifest>
                    <manifestEntries>
                      <Class-Path>.</Class-Path>
                      <Rsrc-Class-Path>./ l${jarinjar.classpath}</Rsrc-Class-Path>
                      <Rsrc-Main-Class>${main.class}</Rsrc-Main-Class>
                    </manifestEntries>
                  </archive>
                  <descriptors>
                    <descriptor>src/assembly/jar-in-jar.xml</descriptor>
                  </descriptors>
                  <recompressZippedFiles>false</recompressZippedFiles>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.4.0</version>
            <executions>
              <execution>
                <id>execute-jarinjar-1</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  jarinjar ${logging.format}</argument>
                    <argument>-jar</argument>
                    <argument>emjar-demo-${project.version}-jarinjar.jar</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>execute-jarinjar-2</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${java.executable}</executable>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <arguments>
                    <argument>-Djava.util.logging.SimpleFormatter.format=  jarinjar ${logging.format}</argument>
                    <argument>-Demjar.demo.classpath-scanning</argument>
                    <argument>-jar</argument>
                    <argument>emjar-demo-${project.version}-jarinjar.jar</argument>
                  </arguments>
                  <successCodes>
                    <successCode>0</successCode>
                    <successCode>1</successCode>
                  </successCodes>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
